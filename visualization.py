# -----------------------------------------
# THIS FILE WAS AUTOGENERATED! DO NOT EDIT!
# -----------------------------------------
# file to edit: 00c_visualization.ipynb

import json
import sys
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from basedir import NUM_CLASSES


import contextlib, io
with contextlib.redirect_stderr(io.StringIO()):
    from data_bunch import DataBunch, load_data, rio


import torch
import torch.nn as nn
from torch.optim.lr_scheduler import CosineAnnealingWarmRestarts
import pretrainedmodels
from sklearn.preprocessing import LabelEncoder
from tqdm import tqdm_notebook as tqdm

from catalyst.dl import SupervisedRunner
from catalyst.contrib.schedulers import OneCycleLR
from catalyst.contrib.modules import GlobalConcatPool2d
from catalyst.dl.callbacks import AccuracyCallback, AUCCallback


import os
os.environ['CUDA_VISIBLE_DEVICES'] = '1'


def encode(train, test):
    enc = LabelEncoder()
    train_labels = [x['cell_type'] for x in train]
    enc.fit(train_labels)
    enc_train_labels = enc.transform(train_labels)
    for train_record, train_label in zip(train, enc_train_labels):
        train_record['cell_type_enc'] = train_label
    for test_record in test:
        test_record['cell_type_enc'] = 0
    return enc


from catalyst.dl.core import Callback
from visdom import Visdom
from pdb import set_trace


class VisdomCallback(Callback):

    def __init__(self,
                 username='username', password='password',
                 host='0.0.0.0', port=9090, use_env_creds=False):
        """
        Args:
            username (str): Visdom server username.
            password (str): Visdom server password.
            host (str): Visdom server address.
            port (int): Visdom server port.
            use_env_creds (bool): If True, then ignore credentials
                passed as __init__ parameters and use Visdom
                environment variables instead.
        """

        super().__init__()

        if use_env_creds:
            username = os.environ['VISDOM_USERNAME']
            password = os.environ['VISDOM_PASSWORD']

        self.vis = Visdom(
            username=username, password=password,
            server=host, port=port)


class BatchMetricsPlotCallback(VisdomCallback):

    def on_batch_end(self, state):
        for k, v in state.metrics.batch_values.items():
            self.vis.line(X=[state.step], Y=[v], win=k, name=k,
                          update='append', opts=dict(title=k))


class EpochMetricsPlotCallback(VisdomCallback):

    def on_epoch_end(self, state):
        for k, v in state.metrics.batch_values.items():
            self.vis.line(X=[state.step], Y=[v], win=k, name=k,
                          update='append', opts=dict(title=k))


batch_size = 800
bunch = DataBunch(
    targets_key='cell_type_enc',
    stats={'mean': (0.5,)*3, 'std': (0.5,)*3},
    channels_mode='rgb')
trn_rec, tst_rec = load_data()
encoder = encode(trn_rec, tst_rec)
datasets = bunch.create(trn_rec, tst_rec, batch_size=batch_size)
test_dl = datasets.pop('test')


def build_model():
    model = pretrainedmodels.resnet50()
    model.avgpool = GlobalConcatPool2d()
    model.last_linear = nn.Sequential(
        nn.Linear(4096, 2048),
        nn.Dropout(0.5),
        nn.ReLU(inplace=True),
        nn.Linear(2048, 1024),
        nn.ReLU(inplace=True),
        nn.Dropout(0.5),
        nn.Linear(1024, 4)
    )
    return model

def freeze_all(model):
    for param in model.parameters():
        param.requires_grad = False

def unfreeze_head(model):
    for param in model.last_linear.parameters():
        param.requires_grad = True


epochs = 3
model = build_model()
freeze_all(model)
unfreeze_head(model)
opt = torch.optim.AdamW(model.parameters(), lr=1e-3, weight_decay=0.1)
sched = CosineAnnealingWarmRestarts(opt, T_0=len(datasets['train']), T_mult=2, eta_min=1e-6)
loss_fn = nn.CrossEntropyLoss()
runner = SupervisedRunner()


runner.train(
    model=model,
    num_epochs=epochs,
    criterion=loss_fn,
    optimizer=opt,
    scheduler=sched,
    logdir='/tmp/cell_type/',
    loaders=datasets,
    callbacks=[
        AccuracyCallback(num_classes=4),
        BatchMetricsPlotCallback(use_env_creds=True),
        EpochMetricsPlotCallback(use_env_creds=True)
    ],
    verbose=True
)
